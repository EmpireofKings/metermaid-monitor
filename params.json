{
  "name": "Metermaid-monitor",
  "tagline": "Parking by the People For the People",
  "body": "### Welcome to Peoplesparking.space\r\n\r\n### Parking for the People\r\nHave you recently moved into a neighborhood and afraid to bring your car for fear of the oppressive metermaid? I feel your pain. \r\n\r\nI don't like cars. I like oppressive regimes even less. \r\n\r\n**tl;dr**\r\nAvoidance, Awareness, and Prevention of parking tickets using Tensorflow, PiCamera, and Metermaids. \r\n\r\nThe purpose of this project was to provide a lazy way to avoid parking tickets. People (like me) who park in residential areas, especially in `2 hour` limited parking know the desire to park for as long as possible without having to move every two hours. Normally what ruins that availability is the dreadful driveby of a metermaid [`Interceptor`](https://www.google.com/search?q=images+interceptor+metermaid&safe=off&espv=2&biw=1321&bih=659&source=lnms&tbm=isch&sa=X&ved=0ahUKEwjjob2Ap4fPAhVfVWMKHaieC-YQ_AUIBigB). With this set of tools, one can park their car, knowing that a notification will arrive via text message notifying them of a passing metermaid. This _should_ mark their 'official' 2 hour parking time limit. As the metermaid should only be able to assume the car had just parked there.\r\n\r\nWe combined Tensorflow image classification with a raspberry pi motion detection and speed measuring program.\r\n\r\n\r\nWhen Image is captured (moving car is in field of view), the image is sent for analysis to an instance running Tensorflow, with trained data.\r\nIf image is a match, a message is sent via twilio with a link to the image for human verification.\r\n\r\nPiCamera Car Monitor --> TensorFlow Classification --> SMS Message\r\n\r\n- Requires Installation of OpenCV 3.0.0 and Python3 and wifi-hotspot (for raspberry pi)\r\n- Tensorflow was ran in docker following this [tutorial](https://codelabs.developers.google.com/codelabs/tensorflow-for-poets/index.html?index=..%2F..%2Findex#5)\r\n- Pictures were shamelessly downloadedfrom Google Images. \r\n\r\n\r\n**This is a free, open-source project and the developers are in _no_way_ accountable for parking tickets because of rebellious, citation-breaking citizens. \r\n\r\nSpecial Thanks\r\n- Paul Sukhanov [@psukhanov](https://github.com/psukhanov) Partner in ~~parking~~ crime, TensorFlow extraordinaire. \r\n- Google [TensorFlow](https://www.tensorflow.org/)\r\n- [Greg Tinkers](https://gregtinkers.wordpress.com/2016/03/25/car-speed-detector/) for his blog and car speed script.\r\n\r\n**Note:\r\nDue to the nature of this hackathon, the final prototype has not been fully tested with classification in a 'real' street environment. Also, as of now, full automation with regards to uploading and processing have not been fully utilized. Performing locally proved much easier in debugging (and on the wallet). Right now it will upload **all** image files, which can be a lot if you live on a heavy-traffic street.\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}